{"version":3,"sources":["../../../src/util/Spotify.js"],"names":["accessToken","client_id","redirect_uri","Spotify","getAccessToken","newAccessToken","window","location","href","match","newExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","searchTerm","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","map","id","track","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","userId"],"mappings":";;;;;AAAA,IAAIA,oBAAJ;AACA,IAAMC,YAAY,kCAAlB;AACA,IAAMC,eAAe,wBAArB;;AAEA;AACA,IAAMC,UAAU;AACZC,kBADY,4BACK;AACb,YAAIJ,WAAJ,EAAiB;AACb,mBAAOA,WAAP;AACH;AACD,YAAMK,iBAAiBC,OAAOC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAvB;AACA,YAAMC,eAAeJ,OAAOC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAArB;AACA,YAAIJ,kBAAkBK,YAAtB,EAAoC;AAChCV,0BAAcK,eAAe,CAAf,CAAd;AACA,gBAAIM,YAAYC,OAAOF,aAAa,CAAb,CAAP,CAAhB;AACA;AACAJ,mBAAOO,UAAP,CAAkB;AAAA,uBAAMb,cAAc,EAApB;AAAA,aAAlB,EAA0CW,YAAY,IAAtD;AACAL,mBAAOQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,mBAAOf,WAAP;AACH,SAPD,MAOO;AACH,gBAAIgB,kEAAgEf,SAAhE,wFAA4JC,YAAhK;AACAI,mBAAOC,QAAP,GAAkBS,SAAlB;AACH;AACJ,KAlBW;AAmBZC,UAnBY,kBAmBLC,UAnBK,EAmBO;AACP,eAAOC,MAAM,8FAA2FD,UAA3F,CAAN,EAA+G;AAClHE,qBAAS,EAACC,2BAAyBrB,WAA1B;AADyG,SAA/G,EAGbsB,IAHa,CAGR,oBAAY;AACf,mBAAOC,SAASC,IAAT,EAAP;AACH,SALc,EAKZF,IALY,CAKP,wBAAgB;AACpB,gBAAIG,aAAaC,MAAjB,EAAyB;AACrB,uBAAOD,aAAaC,MAAb,CAAoBC,GAApB,CAAwB;AAAA,2BAAU;AACjCC,4BAAIC,MAAMD,EADuB;AAEjCE,8BAAMD,MAAMC,IAFqB;AAGjCC,gCAAQF,MAAMG,OAAN,CAAc,CAAd,EAAiBF,IAHQ;AAIjCG,+BAAOJ,MAAMI,KAAN,CAAYH,IAJc;AAKjCI,6BAAKL,MAAMK;AALsB,qBAAV;AAAA,iBAAxB,CAAP;AASH,aAVD,MAUO;AACH;AACA,uBAAO,EAAP;AACH;AACJ,SApBc,CAAP;AAqBX,KAzCW;AA0CZC,gBA1CY,wBA0CCC,YA1CD,EA0CeC,SA1Cf,EA0C0B;AAClC,YAAID,gBAAgBC,SAApB,EAA+B;AAC3B,gBAAMrC,eAAcG,QAAQC,cAAR,EAApB;AACA,gBAAMgB,UAAU;AACZA,yBAAS;AACL,qCAAiB,YAAYpB;AADxB;AADG,aAAhB;AAKA,gBAAIsC,eAAJ;AACA,mBAAOnB,MAAM,+BAAN,EAAuC,EAACC,SAASA,OAAV,EAAvC,EAA2DE,IAA3D,CAAgE,oBAAY;AAC/E,uBAAOC,SAASC,IAAT,EAAP;AACH,aAFM,EAEJF,IAFI,CAEC,wBAAgB;AACpB,oBAAIG,aAAaG,EAAjB,EAAoB;AAChBU,6BAASb,aAAaG,EAAtB;AACA,2BAAOU,MAAP;AACH;AACJ,aAPM,CAAP;AAQH;AAEJ;AA7DW,CAAhB;;kBAgEenC,O","file":"Spotify.js","sourcesContent":["let accessToken;\r\nconst client_id = '1061154da1164bbc9b258f51a6642468';\r\nconst redirect_uri = 'http://localhost:3000/';\r\n\r\n//Create a Spotify Module\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (newAccessToken && newExpiresIn) {\r\n            accessToken = newAccessToken[1];\r\n            let expiresIn = Number(newExpiresIn[1]);\r\n            //Clear the parameters from the URL, so the app doesn't try grabbing the access token after it has expired\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            let accessUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirect_uri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n    search(searchTerm) {\r\n                return fetch('https://cors-anywhere.herokuapp.com/' + `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\r\n                    headers: {Authorization: `Bearer ${accessToken}`}\r\n                }\r\n        ).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (jsonResponse.tracks) {\r\n                return jsonResponse.tracks.map(track => ({\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n                    }\r\n\r\n                ));\r\n            } else {\r\n                //return empty array\r\n                return [];\r\n            }\r\n        })\r\n    },\r\n    savePlaylist(playlistName, trackURIs) {\r\n        if (playlistName && trackURIs) {\r\n            const accessToken = Spotify.getAccessToken();\r\n            const headers = {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + accessToken\r\n                }\r\n            };\r\n            let userId;\r\n            return fetch('https://api.spotify.com/v1/me', {headers: headers}).then(response => {\r\n                return response.json();\r\n            }).then(jsonResponse => {\r\n                if (jsonResponse.id){\r\n                    userId = jsonResponse.id;\r\n                    return userId;\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport default Spotify;"]}